{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PropTypes = require(\"prop-types\");\n\nvar React = require(\"react\");\n\nvar classNames = require(\"classnames\");\n\n;\n;\nvar propTypes = {\n  boxed: PropTypes.bool,\n  fixed: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  skin: PropTypes.oneOf(['blue', 'black', 'purple', 'green', 'red', 'yellow', 'blue-light', 'black-light', 'purple-light', 'green-light', 'red-light', 'yellow-light']).isRequired\n};\nvar defaultProps = {\n  boxed: false,\n  fixed: false\n};\nvar childContextTypes = {\n  $adminlte_layout: PropTypes.shape({\n    toggleMainSidebar: PropTypes.func\n  })\n};\nvar contextTypes = {\n  document: PropTypes.object\n};\n\nvar Layout =\n/** @class */\nfunction (_super) {\n  __extends(Layout, _super);\n\n  function Layout(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.state = {\n      document: context.document ? context.document : document\n    };\n    return _this;\n  }\n\n  Layout.prototype.componentDidMount = function () {\n    this.state.document.body.classList.toggle('sidebar-mini', true);\n    this.state.document.body.classList.toggle(\"skin-\" + this.props.skin, true);\n\n    if (this.props.boxed) {\n      this.state.document.body.classList.toggle('layout-boxed', true);\n    }\n\n    if (this.props.fixed) {\n      this.state.document.body.classList.toggle('fixed', true);\n    }\n  };\n\n  Layout.prototype.componentWillReceiveProps = function (nextProps) {\n    if (this.props.skin !== nextProps.skin) {\n      this.state.document.body.classList.toggle(\"skin-\" + nextProps.skin, true);\n      this.state.document.body.classList.toggle(\"skin-\" + this.props.skin, false);\n    }\n\n    this.state.document.body.classList.toggle('layout-boxed', nextProps.boxed);\n    this.state.document.body.classList.toggle('fixed', nextProps.fixed);\n  };\n\n  Layout.prototype.componentWillUnmount = function () {\n    this.state.document.body.classList.toggle('sidebar-mini', false);\n    this.state.document.body.classList.toggle(\"skin-\" + this.props.skin, false);\n    this.state.document.body.classList.toggle('layout-boxed', false);\n    this.state.document.body.classList.toggle('fixed', false);\n    this.state.document.body.classList.toggle('sidebar-collapse', false);\n  };\n\n  Layout.prototype.getChildContext = function () {\n    var _this = this;\n\n    return {\n      $adminlte_layout: {\n        toggleMainSidebar: function toggleMainSidebar() {\n          _this.state.document.body.classList.toggle('sidebar-collapse');\n        },\n        setMainSidebarCollapsed: function setMainSidebarCollapsed(val) {\n          _this.state.document.body.classList.toggle('sidebar-collapse', val);\n        }\n      }\n    };\n  };\n\n  Layout.prototype.render = function () {\n    var classes = {\n      wrapper: true\n    };\n    return React.createElement(\"div\", {\n      className: classNames(this.props.className, classes)\n    }, this.props.children);\n  };\n\n  Layout.propTypes = propTypes;\n  Layout.defaultProps = defaultProps;\n  Layout.childContextTypes = childContextTypes;\n  Layout.contextTypes = contextTypes;\n  return Layout;\n}(React.Component);\n\nexports.default = Layout;","map":null,"metadata":{},"sourceType":"script"}