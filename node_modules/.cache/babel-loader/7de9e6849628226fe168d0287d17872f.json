{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\Hunani Trading Co\\\\react\\\\quotation\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport React, { forwardRef, memo } from 'react';\nimport clsx from 'clsx';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Cell(_ref, ref) {\n  var className = _ref.className,\n      column = _ref.column,\n      isRowSelected = _ref.isRowSelected,\n      lastFrozenColumnIndex = _ref.lastFrozenColumnIndex,\n      row = _ref.row,\n      rowIdx = _ref.rowIdx,\n      eventBus = _ref.eventBus,\n      onRowClick = _ref.onRowClick,\n      onClick = _ref.onClick,\n      onDoubleClick = _ref.onDoubleClick,\n      onContextMenu = _ref.onContextMenu,\n      onDragOver = _ref.onDragOver,\n      props = _objectWithoutProperties(_ref, [\"className\", \"column\", \"isRowSelected\", \"lastFrozenColumnIndex\", \"row\", \"rowIdx\", \"eventBus\", \"onRowClick\", \"onClick\", \"onDoubleClick\", \"onContextMenu\", \"onDragOver\"]);\n\n  function selectCell(openEditor) {\n    eventBus.dispatch('SELECT_CELL', {\n      idx: column.idx,\n      rowIdx: rowIdx\n    }, openEditor);\n  }\n\n  function handleCellClick() {\n    selectCell();\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleCellContextMenu() {\n    selectCell();\n  }\n\n  function handleCellDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked, isShiftClick) {\n    eventBus.dispatch('SELECT_ROW', {\n      rowIdx: rowIdx,\n      checked: checked,\n      isShiftClick: isShiftClick\n    });\n  }\n\n  var cellClass = column.cellClass;\n  className = clsx('rdg-cell', {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.idx === lastFrozenColumnIndex\n  }, typeof cellClass === 'function' ? cellClass(row) : cellClass, className);\n  return React.createElement(\"div\", Object.assign({\n    ref: ref,\n    className: className,\n    style: {\n      width: column.width,\n      left: column.left\n    },\n    onClick: wrapEvent(handleCellClick, onClick),\n    onDoubleClick: wrapEvent(handleCellDoubleClick, onDoubleClick),\n    onContextMenu: wrapEvent(handleCellContextMenu, onContextMenu),\n    onDragOver: wrapEvent(preventDefault, onDragOver)\n  }, props), React.createElement(column.formatter, {\n    column: column,\n    rowIdx: rowIdx,\n    row: row,\n    isRowSelected: isRowSelected,\n    onRowSelectionChange: onRowSelectionChange\n  }));\n}\n\nexport default memo(forwardRef(Cell));","map":null,"metadata":{},"sourceType":"module"}