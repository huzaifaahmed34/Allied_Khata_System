{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\Hunani Trading Co\\\\react\\\\quotation\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\nimport Cell from './Cell';\nimport { preventDefault, wrapEvent } from './utils';\n\nfunction Row(_ref) {\n  var _ref$cellRenderer = _ref.cellRenderer,\n      CellRenderer = _ref$cellRenderer === void 0 ? Cell : _ref$cellRenderer,\n      className = _ref.className,\n      eventBus = _ref.eventBus,\n      rowIdx = _ref.rowIdx,\n      isRowSelected = _ref.isRowSelected,\n      lastFrozenColumnIndex = _ref.lastFrozenColumnIndex,\n      onRowClick = _ref.onRowClick,\n      row = _ref.row,\n      viewportColumns = _ref.viewportColumns,\n      onDragEnter = _ref.onDragEnter,\n      onDragOver = _ref.onDragOver,\n      onDrop = _ref.onDrop,\n      rowClass = _ref.rowClass,\n      top = _ref.top,\n      props = _objectWithoutProperties(_ref, [\"cellRenderer\", \"className\", \"eventBus\", \"rowIdx\", \"isRowSelected\", \"lastFrozenColumnIndex\", \"onRowClick\", \"row\", \"viewportColumns\", \"onDragEnter\", \"onDragOver\", \"onDrop\", \"rowClass\", \"top\"]);\n\n  function handleDragEnter(event) {\n    // Prevent default to allow drop\n    event.preventDefault();\n    eventBus.dispatch('DRAG_ENTER', rowIdx);\n  }\n\n  function handleDragOver(event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  className = clsx('rdg-row', \"rdg-row-\".concat(rowIdx % 2 === 0 ? 'even' : 'odd'), {\n    'rdg-row-selected': isRowSelected\n  }, rowClass?.(row), className); // Regarding onDrop: the default in Firefox is to treat data in dataTransfer as a URL,\n  // and perform navigation on it, even if the data type used is 'text'.\n  // To bypass this, we need to capture and prevent the drop event.\n\n  return React.createElement(\"div\", Object.assign({\n    className: className,\n    onDragEnter: wrapEvent(handleDragEnter, onDragEnter),\n    onDragOver: wrapEvent(handleDragOver, onDragOver),\n    onDrop: wrapEvent(preventDefault, onDrop),\n    style: {\n      top: top\n    }\n  }, props), viewportColumns.map(function (column) {\n    return React.createElement(CellRenderer, {\n      key: column.key,\n      rowIdx: rowIdx,\n      column: column,\n      lastFrozenColumnIndex: lastFrozenColumnIndex,\n      row: row,\n      isRowSelected: isRowSelected,\n      eventBus: eventBus,\n      onRowClick: onRowClick\n    });\n  }));\n}\n\nexport default memo(Row);","map":null,"metadata":{},"sourceType":"module"}